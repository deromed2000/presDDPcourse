p2[2,2]-p2[1,2]
2*beta1
0.4474434/0.1433406
?legend
?locator
library(sm)
attach(mtcars)
# create value labels
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densities
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
# add legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
library(sm)
attach(mtcars)
# create value labels
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densities
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
# add legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
d <- density(faithful$eruptions, bw = "nrd0")
d
plot(d)
d <- density(faithful$eruptions, bw = "nrd")
plot(d)
d <- density(faithful$eruptions, bw = "ucv")
plot(d)
d <- density(faithful$eruptions, bw = "bcv")
plot(d)
y <- rt(200, df = 2)
qqnorm(y)
qqline(y, col = grey(.6))
?rt
y <- rnorm(200, df = 2)
y <- rnorm(200)
qqnorm(y)
qqline(y, col = grey(.6))
y <- rchisq(200)
y <- rchisq(200, df = 2)
qqnorm(y)
qqline(y, col = grey(.6))
y <- rt(200, df = 2)
qqnorm(y)
qqline(y, col = grey(.6))
?qqnorm
qnorm(0)
pnorm(0)
y <- rt(200, df = 2)
qqnorm(y)
z <- rnorm(200)
qqnorm(z)
xvals <- seq(-4, 4, length = 100)
plot(range(xvals), range(dnorm(xvals), dt(xvals, df = 2)), type = "n", xlab = "", ylab = "", frame = FALSE)
lines(xvals, dnorm(xvals), lwd = 3, col = gray(.6))
lines(xvals, dt(xvals, df = 2), lwd = 3)
y <- rexp(200)
qqnorm(y)
qqline(y, col = grey(.6))
xvals <- seq(-3, 4, length = 100)
plot(range(xvals), range(dnorm(xvals), dexp(xvals)), type = "n", xlab = "", ylab = "", frame = FALSE)
lines(xvals, dnorm(xvals), lwd = 3, col = gray(.6))
lines(xvals, dexp(xvals), lwd = 3)
y <- rnorm(200, mean = 10, sd = 4)
qqnorm(y)
qqline(y, col = grey(.6))
library(MASS)
data(caith)
mosaicplot(caith, color = topo.colors(4), main = "Mosaic plot")
?tab
?t
?table
caith
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modfit1 <- train(y ~ ., data = vowel.train, method = "rf", prow = TRUE)
library(caret)
modfit1 <- train(y ~ ., data = vowel.train, method = "rf", prow = TRUE)
modfit2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
predict(modfit1, vowel.test)
pred1 <- predict(modfit1, vowel.test)
rmse(pred1, vowel.test$y)
library(metrics)
install.packages("metrics")
install.packages("Metrics")
library(metrics)
library(Metrics)
rmse(pred1, vowel.test$y)
pred2 <- predict(modfit2, vowel.test)
rmse(pred2, vowel.test$y)
vowel.test$y
rmse(pred2, vowel.train$y)
modfit1 <- train(y ~ ., data = vowel.train, method = "rf", prow = TRUE)
pred1 <- predict(modfit1, vowel.test)
rmse(pred1, vowel.train$y)
rmse(pred1, vowel.test$y)
modfit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
pred1 <- predict(modfit1, vowel.test)
rmse(pred1, vowel.test$y)
rmse(pred2, vowel.test$y)
pred1
confusionMatrix(pred1, vowel.test$y)
cmgbm <- confusionMatrix(pred2, vowel.test$y)
cmrf <- confusionMatrix(pred1, vowel.test$y)
cmrf$overall['Accuracy']
cmgbm$overall['Accuracy']
combine <- predict(modfit1, vowel.test)/2 + predict(modfit2, vowel.test)/2
datacombined <- data.frame(pred1, pred2, y=vowel.test$y)
fit <- train(y~., datacombined)
pfit <- predict(fit, vowel.test)
cmpfit <- confusionMatrix(pfit, vowel.test$y)
cmpfit$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed( 62433)
pRF <- predict(fitRF, testing)
fitRF <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
fitGBM <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
fitLDA <- train(y ~ ., data = vowel.train, method = "lda")
pRF <- predict(fitRF, testing)
pRF <- predict(fitRF, vowel.test)
pGBM <- predict(fitGBM, vowel.test)
pLDA <- predict(fitLDA, vowel.test)
fitRF <- train(y ~ ., data = training, method = "rf", prox = TRUE)
fitRF <- train(diagnosis ~ ., data = training, method = "rf", prox = TRUE)
fitGBM <- train(diagnosis ~ ., data = training, method = "gbm", verbose = FALSE)
fitLDA <- train(diagnosis ~ ., data = training, method = "lda")
pRF <- predict(fitRF, testing)
pGBM <- predict(fitGBM, testing)
pLDA <- predict(fitLDA, testing)
combinedset <- data.frame(pRF, pGBM, pLDA, diagnosis = testing$diagnosis)
fit <- train(diagnosis~., combinedset, method="rf")
predict <- predict(fit, testing)
cmRF <- confusionMatrix(pRF, testing$diagnosis)
cmGBF <- confusionMatrix(pGBM, testing$diagnosis)
cmLDA <- confusionMatrix(pLDA, testing$diagnosis)
cm <- confusionMatrix(predict, testing$diagnosis)
cmRF$overall['Accuracy']
cmGBF$overall['Accuracy']
cmLDA$overall['Accuracy']
cm$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fit <- train(CompressiveStrength ~ ., training, method="lasso")
plot.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
?plot.enet
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
getwd()
download.file(fileURL, destfile="./courseraR/gaData.csv")
dat = read.csv("~/courseraR/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
library(forecast)
library(quantmod)
mod <- bats(tstrain)
library(lubridate)  # For year() function below
mod <- bats(tstrain)
install.packages("forecast")
mod <- bats(tstrain)
library(forecast)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
data(gmVol)
?gmVol
??gmVol
??grey matter
?grey matter
?grey
library(MASS)
data(gmVol)
install.packages("bootstrap")
data(gmVol)
getwd()
setwd("CourseraR//Developing Data Products")
getwd()
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta")
library(shiny)
runApp("ProjectDDP_beta")
runApp("ProjectDDP_beta")
runApp("ProjectDDP_beta")
runApp("ProjectDDP_beta")
runApp("ProjectDDP_beta")
runApp("ProjectDDP_beta")
library(ISLR);library(randomForest); library(caret); data(Wage)
Wage <- subset(Wage,select=-c(logwage, region))
predVar <- c("age","sex","maritl","race","education","jobclass","health","health_ins")
model.RF <- randomForest(x = Wage[ ,predVar],
y = Wage$wage,
ntree = 20)
WagePrediction <- function(df) predict(model.RF, newdata = df)
df= data.frame(age = 36,
sex = "1. Male",
maritl = "1. Never Married",
race = "1. White",
education = "1. < HS Grad",
region = "1. Middle Atlantic",
jobclass = "1. Industrial",
health = "1. <=Good",
health_ins = "1. Yes")
levels(df$sex) <- levels(Wage$sex)
levels(df$maritl) <- levels(Wage$maritl)
levels(df$race) <- levels(Wage$race)
levels(df$education) <- levels(Wage$education)
levels(df$jobclass) <- levels(Wage$jobclass)
levels(df$health) <- levels(Wage$health)
levels(df$health_ins) <- levels(Wage$health_ins)
WagePrediction(df)
str(Wage)
runApp("ProjectDDP_beta/")
runApp("ProjectDDP/")
runApp("ProjectDDP_beta//")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
library(ISLR);library(randomForest); library(caret); data(Wage)
Wage <- subset(Wage,select=-c(logwage, region, health))
predVar <- c("age","sex","maritl","race","education","jobclass","health_ins")
model.RF <- randomForest(x = Wage[ ,predVar],
y = Wage$wage,
ntree = 20)
WagePrediction <- function(df) predict(model.RF, newdata = df)
df= data.frame(age = 36,
sex = "1. Male",
maritl = "1. Never Married",
race = "1. White",
education = "1. < HS Grad",
region = "1. Middle Atlantic",
jobclass = "1. Industrial",
health_ins = "1. Yes")
levels(df$sex) <- levels(Wage$sex)
levels(df$maritl) <- levels(Wage$maritl)
levels(df$race) <- levels(Wage$race)
levels(df$education) <- levels(Wage$education)
levels(df$jobclass) <- levels(Wage$jobclass)
levels(df$health_ins) <- levels(Wage$health_ins)
WagePrediction(df)
df= data.frame(age = 45,
sex = "1. Male",
maritl = "1. Never Married",
race = "1. White",
education = "1. < HS Grad",
region = "1. Middle Atlantic",
jobclass = "1. Industrial",
health_ins = "1. Yes")
levels(df$sex) <- levels(Wage$sex)
levels(df$maritl) <- levels(Wage$maritl)
levels(df$race) <- levels(Wage$race)
levels(df$education) <- levels(Wage$education)
levels(df$jobclass) <- levels(Wage$jobclass)
levels(df$health_ins) <- levels(Wage$health_ins)
WagePrediction(df)
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
??Wage
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ShinyProject3/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ShinyProject8/")
runApp("ShinyProject1/")
runApp("ShinyProject2/")
runApp("ShinyProject3/")
runApp("ShinyProject4/")
runApp("ShinyProject4/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ShinyProject4/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ShinyProject4/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ShinyProject4/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
?data.frame()
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
For more details on authoring R presentations click the
library(slidify)
author("presDDPcourse")
getwd()
browseURL("index.Rmd")
library(knitr)
browseURL("index.Rmd")
browseURL("index.html")
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
getwd()
setwd("..")
getwd()
runApp("ProjectDDP_beta/")
runApp("ProjectDDP_beta/")
getwd()
getwd("presDDPcourse/")
getwd("presDDPcourse")
getwd()
setwd("presDDPcourse")
getwd()
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
publish(title = 'Wage Database Explorer and Predictor', 'index.html', host = 'rpubs')
browseURL('index.html')
publish(title = 'Wage Database Explorer and Predictor', 'index.html', host = 'rpubs')
find.package("RCurl")
.libPaths( "")
find.package("RCurl")
publish(title = 'Wage Database Explorer and Predictor', 'index.html', host = 'rpubs')
getwd("..")
setwd("..")
getwd()
library(knitr)
RpresDDPproject
getwd()
- Bullet 3
RpresDDPproject
My test presentation
setwd("Slidify/")
My test presentation
========================================================
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
getwd()
date:
First Slide
date: `r date`
Developping Data Products
transition: rotate
getwd()
setwd("..")
Wage Database explorer and predictor
Wage Database explorer and predictor
library(knitr)
library(slidify)
library(knitr)
library(shiny)
library(knitr)
date: The 27 Septembre 2015
Wage Database explorer and predictor
getwd()
setwd("presDDPcourse/")
browseURL("index.html")
setwd("..")
Wage Database Explorer
getwd()
My test presentation
setwd("Slidify/")
My test presentation
getwd()
setwd("..")
getwd("presDDPcourse/")
setwd("presDDPcourse/")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'Wage Explorer and Predictor', 'index.html', host = 'rpubs')
